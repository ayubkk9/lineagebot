package com.lineagebot;

import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.ObservableList;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;

public class BotController {
    private final ScreenReader screenReader;
    private final ArduinoInterface arduino;
    private volatile boolean running = false;
    private final double hpPercent;
    private final double mpPercent;
    private final StringProperty log = new SimpleStringProperty();
    private final String characterWindow;
    private final ObservableList<BotUIController.Action> actions;
    private final int[] hpBar;
    private final int[] mpBar;
    private final int[] mobHpBar;
    private final Object lock = new Object();

    public BotController(String arduinoPort, double hpPercent, double mpPercent, String characterWindow,
                         ObservableList<BotUIController.Action> actions, int[] hpBar, int[] mpBar, int[] mobHpBar) {
        this.screenReader = new ScreenReader();
        this.arduino = new ArduinoInterface(arduinoPort, this::log);
        this.hpPercent = hpPercent / 100.0;
        this.mpPercent = mpPercent / 100.0;
        this.characterWindow = characterWindow;
        this.actions = actions;
        this.hpBar = hpBar;
        this.mpBar = mpBar;
        this.mobHpBar = mobHpBar;
    }

    public void startBot() throws Exception {
        synchronized (lock) {
            if (!arduino.isPortOpen()) {
                log("–û—à–∏–±–∫–∞: –ø–æ—Ä—Ç Arduino –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
                throw new Exception("–ü–æ—Ä—Ç Arduino –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }

        running = true;
        new Thread(() -> {
            while (running) {
                try {
                    if (!isWindowActive(characterWindow)) {
                        log("–û–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞");
                        Thread.sleep(2000);
                        continue;
                    }

                    // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –º–æ–±–∞
                    String searchKeys = getActionKeys("–ü–æ–∏—Å–∫ –ú–æ–±–∞");
                    if (!searchKeys.isEmpty()) {
                        synchronized (lock) {
                            for (String key : searchKeys.split(",")) {
                                arduino.sendCommand("PRESS_KEY:" + key.trim());
                                log("üîç –ü–æ–∏—Å–∫ —Ü–µ–ª–∏: " + key.trim());
                                Thread.sleep(200);
                            }
                        }
                    }

                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏
                    int attackAttempts = 0;
                    double currentMobHP;

                    synchronized (lock) {
                        currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                    }
                    log("‚ù§Ô∏è HP –º–æ–±–∞: " + String.format("%.1f%%", currentMobHP * 100));

                    // –ê—Ç–∞–∫—É–µ–º –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞, –º–∞–∫—Å–∏–º—É–º 5 —Ä–∞–∑
                    while (currentMobHP > 0.05 && attackAttempts < 8 && running) {
                        String attackKeys = getActionKeys("–ê—Ç–∞–∫–∞ –º–æ–±–∞");
                        if (!attackKeys.isEmpty()) {
                            synchronized (lock) {
                                for (String key : attackKeys.split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("‚öîÔ∏è –ê—Ç–∞–∫–∞ (" + (attackAttempts + 1) + "/5): " + key.trim());
                                    Thread.sleep(300);
                                }
                            }
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HP –º–æ–±–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
                        synchronized (lock) {
                            currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                        }
                        log("‚ù§Ô∏è HP –º–æ–±–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏: " + String.format("%.1f%%", currentMobHP * 100));

                        attackAttempts++;
                        Thread.sleep(500); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
                    }

                    // –ï—Å–ª–∏ –º–æ–± –º–µ—Ä—Ç–≤
                    if (currentMobHP <= 0.05) {
                        log("‚úÖ –ú–æ–± —É–±–∏—Ç! –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É...");
                        Thread.sleep(1000);

                        // –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞
                        String deadKeys = getActionKeys("–ú–æ–± —É–±–∏—Ç");
                        if (!deadKeys.isEmpty()) {
                            synchronized (lock) {
                                for (String key : deadKeys.split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞: " + key.trim());
                                    Thread.sleep(300);
                                }
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    checkPlayerStatus();
                    Thread.sleep(1000);

                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                } catch (Exception e) {
                    log("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: " + e.getMessage());
                }
            }
        }).start();
    }

    private void checkPlayerStatus() {
        try {
            String mpKey = getActionKeys("–ù–∏–∑–∫–æ–µ MP");
            String hpKey = getActionKeys("–ù–∏–∑–∫–æ–µ HP");

            if (!mpKey.isEmpty()) {
                double playerMP;
                synchronized (lock) {
                    playerMP = screenReader.readBarLevel(mpBar[0], mpBar[1], mpBar[2], mpBar[3]);
                }
                if (playerMP < mpPercent) {
                    synchronized (lock) {
                        arduino.sendCommand("PRESS_KEY:" + mpKey);
                    }
                    log("üíß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MP: " + mpKey);
                }
            }

            if (!hpKey.isEmpty()) {
                double playerHP;
                synchronized (lock) {
                    playerHP = screenReader.readBarLevel(hpBar[0], hpBar[1], hpBar[2], hpBar[3]);
                }
                if (playerHP < hpPercent) {
                    synchronized (lock) {
                        arduino.sendCommand("PRESS_KEY:" + hpKey);
                    }
                    log("‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP: " + hpKey);
                }
            }
        } catch (Exception e) {
            log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HP/MP: " + e.getMessage());
        }
    }

    public void stopBot() {
        running = false;
        synchronized (lock) {
            arduino.close();
        }
        log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    public StringProperty logProperty() {
        return log;
    }

    public void log(String message) {
        Platform.runLater(() -> log.set(log.get() + message + "\n"));
    }

    private String getActionKeys(String actionType) {
        for (BotUIController.Action action : actions) {
            if (action.getActionType().equals(actionType)) {
                return action.getKeys();
            }
        }
        return "";
    }

    private boolean isWindowActive(String windowTitle) {
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            WinDef.HWND hWnd = User32.INSTANCE.FindWindow(null, windowTitle);
            return hWnd != null && User32.INSTANCE.IsWindowVisible(hWnd);
        }
        try {
            return ProcessHandle.allProcesses()
                    .map(ProcessHandle::info)
                    .map(ProcessHandle.Info::command)
                    .filter(cmd -> cmd.isPresent() && cmd.get().contains(windowTitle))
                    .findAny()
                    .isPresent();
        } catch (Exception e) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞: " + e.getMessage());
            return true;
        }
    }
}