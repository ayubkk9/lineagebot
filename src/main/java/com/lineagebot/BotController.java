package com.lineagebot;

import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.ObservableList;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;

public class BotController {
    private final ScreenReader screenReader;
    private final ArduinoInterface arduino;
    private volatile boolean running = false;
    private final double hpPercent;
    private final double mpPercent;
    private final StringProperty log = new SimpleStringProperty();
    private final String characterWindow;
    private final ObservableList<BotUIController.Action> actions;
    private final int[] hpBar;
    private final int[] mpBar;
    private final int[] mobHpBar;
    private final Object lock = new Object();

    public BotController(String arduinoPort, double hpPercent, double mpPercent, String characterWindow,
                         ObservableList<BotUIController.Action> actions, int[] hpBar, int[] mpBar, int[] mobHpBar) {
        this.screenReader = new ScreenReader();
        this.arduino = new ArduinoInterface(arduinoPort, this::log);
        this.hpPercent = hpPercent / 100.0;
        this.mpPercent = mpPercent / 100.0;
        this.characterWindow = characterWindow;
        this.actions = actions;
        this.hpBar = hpBar;
        this.mpBar = mpBar;
        this.mobHpBar = mobHpBar;
    }

    public void startBot() throws Exception {
        synchronized (lock) {
            if (!arduino.isPortOpen()) {
                log("–û—à–∏–±–∫–∞: –ø–æ—Ä—Ç Arduino –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
                throw new Exception("–ü–æ—Ä—Ç Arduino –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }

        running = true;
        new Thread(() -> {
            while (running) {
                try {
                    if (!isWindowActive(characterWindow)) {
                        log("–û–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞");
                        Thread.sleep(2000);
                        continue;
                    }

                    // 1. –ü–æ–∏—Å–∫ –º–æ–±–∞ (–µ—Å–ª–∏ –∫–ª–∞–≤–∏—à–∏ –∑–∞–¥–∞–Ω—ã)
                    String searchKeys = getActionKeys("–ü–æ–∏—Å–∫ –ú–æ–±–∞");
                    if (!searchKeys.isEmpty()) {
                        synchronized (lock) {
                            for (String key : searchKeys.split(",")) {
                                arduino.sendCommand("PRESS_KEY:" + key.trim());
                                log("üîç –ü–æ–∏—Å–∫ —Ü–µ–ª–∏: " + key.trim());
                                Thread.sleep(200);
                            }
                        }
                    }

                    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º HP –º–æ–±–∞
                    double currentMobHP;
                    synchronized (lock) {
                        currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                    }
                    log("‚ù§Ô∏è HP –º–æ–±–∞: " + (currentMobHP * 100) + "%");

                    // 3. –ï—Å–ª–∏ –º–æ–± –∂–∏–≤ - –∞—Ç–∞–∫—É–µ–º
                    if (currentMobHP > 0.05) { // 5% –≤–º–µ—Å—Ç–æ 1% –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                        String attackKeys = getActionKeys("–ê—Ç–∞–∫–∞ –º–æ–±–∞");
                        if (!attackKeys.isEmpty()) {
                            synchronized (lock) {
                                for (String key : attackKeys.split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("‚öîÔ∏è –ê—Ç–∞–∫–∞: " + key.trim());
                                    Thread.sleep(300); // –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∞—Ç–∞–∫–∞–º–∏
                                }
                            }
                        }
                        Thread.sleep(800); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π HP –º–æ–±–∞
                        continue;
                    }

                    // 4. –ï—Å–ª–∏ –º–æ–± –º—ë—Ä—Ç–≤ - –∂–¥—ë–º 1-2 —Å–µ–∫ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ
                    log("‚ò†Ô∏è –ú–æ–± —É–±–∏—Ç! –ñ–¥—ë–º 1.5 —Å–µ–∫...");
                    Thread.sleep(1500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ

                    String deadKeys = getActionKeys("–ú–æ–± —É–±–∏—Ç");
                    if (!deadKeys.isEmpty()) {
                        synchronized (lock) {
                            for (String key : deadKeys.split(",")) {
                                arduino.sendCommand("PRESS_KEY:" + key.trim());
                                log("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞: " + key.trim());
                                Thread.sleep(300);
                            }
                        }
                    }

                    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º MP –∏ HP –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    checkPlayerStatus();

                    // 6. –û–±—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                    Thread.sleep(1000);

                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                } catch (Exception e) {
                    log("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
                }
            }
        }).start();
    }

    // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HP/MP –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    private void checkPlayerStatus() {
        try {
            String mpKey = getActionKeys("–ù–∏–∑–∫–æ–µ MP");
            String hpKey = getActionKeys("–ù–∏–∑–∫–æ–µ HP");

            if (!mpKey.isEmpty()) {
                double playerMP = screenReader.readBarLevel(mpBar[0], mpBar[1], mpBar[2], mpBar[3]);
                if (playerMP < mpPercent) {
                    arduino.sendCommand("PRESS_KEY:" + mpKey);
                    log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MP: " + mpKey);
                }
            }

            if (!hpKey.isEmpty()) {
                double playerHP = screenReader.readBarLevel(hpBar[0], hpBar[1], hpBar[2], hpBar[3]);
                if (playerHP < hpPercent) {
                    arduino.sendCommand("PRESS_KEY:" + hpKey);
                    log("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP: " + hpKey);
                }
            }
        } catch (Exception e) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HP/MP: " + e.getMessage());
        }
    }

    public void stopBot() {
        running = false;
        synchronized (lock) {
            arduino.close();
        }
        log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    public StringProperty logProperty() {
        return log;
    }

    public void log(String message) {
        Platform.runLater(() -> log.set(log.get() + message + "\n"));
    }

    private String getActionKeys(String actionType) {
        for (BotUIController.Action action : actions) {
            if (action.getActionType().equals(actionType)) {
                return action.getKeys();
            }
        }
        return "";
    }

    private boolean isWindowActive(String windowTitle) {
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            WinDef.HWND hWnd = User32.INSTANCE.FindWindow(null, windowTitle);
            return hWnd != null && User32.INSTANCE.IsWindowVisible(hWnd);
        }
        // –î–ª—è macOS –∏ Linux –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ ProcessHandle
        try {
            return ProcessHandle.allProcesses()
                    .map(ProcessHandle::info)
                    .map(ProcessHandle.Info::command)
                    .filter(cmd -> cmd.isPresent() && cmd.get().contains(windowTitle))
                    .findAny()
                    .isPresent();
        } catch (Exception e) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞ –Ω–∞ " + os + ": " + e.getMessage());
            return true; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –û–°
        }
    }
}