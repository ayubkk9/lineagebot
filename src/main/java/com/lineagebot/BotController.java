package com.lineagebot;

import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.ObservableList;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;

import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

public class BotController {
    private final ScreenReader screenReader;
    private final ArduinoInterface arduino;
    private volatile boolean running = false;
    private final double hpPercent;
    private final double mpPercent;
    private final StringProperty log = new SimpleStringProperty("");
    private final String characterWindow;
    private final ObservableList<BotUIController.Action> actions;
    private final ObservableList<Skill> skills;
    private final int[] hpBar;
    private final int[] mpBar;
    private final int[] mobHpBar;
    private final Object lock = new Object();
    private final Random random = new Random();

    public BotController(String arduinoPort, double hpPercent, double mpPercent, String characterWindow,
                         ObservableList<BotUIController.Action> actions, ObservableList<Skill> skills,
                         int[] hpBar, int[] mpBar, int[] mobHpBar) {
        this.screenReader = new ScreenReader();
        this.arduino = new ArduinoInterface(arduinoPort, this::log);
        this.hpPercent = hpPercent / 100.0;
        this.mpPercent = mpPercent / 100.0;
        this.characterWindow = characterWindow;
        this.actions = actions;
        this.skills = skills;
        this.hpBar = hpBar;
        this.mpBar = mpBar;
        this.mobHpBar = mobHpBar;
    }

    public void startBot() throws Exception {
        synchronized (lock) {
            if (!arduino.isPortOpen()) {
                log("–û—à–∏–±–∫–∞: –ø–æ—Ä—Ç Arduino –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
                throw new Exception("–ü–æ—Ä—Ç Arduino –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
            }
        }

        running = true;
        new Thread(() -> {
            while (running) {
                try {
                    if (!isWindowActive(characterWindow)) {
                        log("–û–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞");
                        Thread.sleep(2000);
                        continue;
                    }

                    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–ª–∏
                    String targetKeys = getActionKeys("–ü–æ–∏—Å–∫ –ú–æ–±–∞");
                    if (targetKeys.isEmpty()) {
                        targetKeys = "F1"; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏
                        log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–ª–∏: F1");
                    }
                    synchronized (lock) {
                        for (String key : targetKeys.split(",")) {
                            arduino.sendCommand("PRESS_KEY:" + key.trim());
                            log("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Ü–µ–ª–∏: " + key.trim());
                            Thread.sleep(300 + random.nextInt(100));
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ —Ü–µ–ª—å
                    double currentMobHP;
                    synchronized (lock) {
                        currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                    }
                    if (currentMobHP <= 0.05) {
                        log("‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...");
                        Thread.sleep(1000);
                        continue;
                    }
                    log("‚ù§Ô∏è HP –º–æ–±–∞: " + String.format("%.1f%%", currentMobHP * 100));

                    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
                    String attackKeys = getActionKeys("–ê—Ç–∞–∫–∞ –º–æ–±–∞");
                    if (attackKeys.isEmpty()) {
                        attackKeys = "F2"; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –∞—Ç–∞–∫–∏
                        log("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–ª–∞–≤–∏—à–∞ –¥–ª—è –∞—Ç–∞–∫–∏: F2");
                    }
                    synchronized (lock) {
                        for (String key : attackKeys.split(",")) {
                            arduino.sendCommand("PRESS_KEY:" + key.trim());
                            log("‚öîÔ∏è –ê—Ç–∞–∫–∞ –Ω–∞—á–∞—Ç–∞: " + key.trim());
                            Thread.sleep(300 + random.nextInt(100));
                        }
                    }

                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏
                    int attackAttempts = 0;
                    while (currentMobHP > 0.05 && attackAttempts < 8 && running) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–∏–ª–ª –∏–∑ —Å–ø–∏—Å–∫–∞
                        if (!skills.isEmpty()) {
                            Skill skill = skills.get(random.nextInt(skills.size()));
                            String skillKey = getSkillKey(skill.getName());
                            if (!skillKey.isEmpty()) {
                                synchronized (lock) {
                                    for (String key : skillKey.split(",")) {
                                        arduino.sendCommand("PRESS_KEY:" + key.trim());
                                        log("ü™Ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ '" + skill.getName() + "': " + key.trim());
                                        Thread.sleep(300 + random.nextInt(100));
                                    }
                                }
                            }
                        }

                        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∞—Ç–∞–∫—É
                        synchronized (lock) {
                            for (String key : attackKeys.split(",")) {
                                arduino.sendCommand("PRESS_KEY:" + key.trim());
                                log("‚öîÔ∏è –ê—Ç–∞–∫–∞ (" + (attackAttempts + 1) + "/8): " + key.trim());
                                Thread.sleep(300 + random.nextInt(100));
                            }
                        }

                        synchronized (lock) {
                            currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                        }
                        log("‚ù§Ô∏è HP –º–æ–±–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏: " + String.format("%.1f%%", currentMobHP * 100));

                        attackAttempts++;
                        Thread.sleep(500 + random.nextInt(200));
                    }

                    // –ï—Å–ª–∏ –º–æ–± –º–µ—Ä—Ç–≤
                    if (currentMobHP <= 0.05) {
                        log("‚úÖ –ú–æ–± —É–±–∏—Ç! –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É...");
                        Thread.sleep(1000);

                        String deadKeys = getActionKeys("–ú–æ–± —É–±–∏—Ç");
                        if (!deadKeys.isEmpty()) {
                            synchronized (lock) {
                                for (String key : deadKeys.split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞: " + key.trim());
                                    Thread.sleep(300 + random.nextInt(100));
                                }
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    checkPlayerStatus();
                    Thread.sleep(1000 + random.nextInt(500));

                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                } catch (Exception e) {
                    log("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: " + e.getMessage());
                    try {
                        Thread.sleep(2000);
                    } catch (InterruptedException ie) {
                        Thread.currentThread().interrupt();
                        break;
                    }
                }
            }
        }).start();
    }

    private void checkPlayerStatus() {
        try {
            String mpKey = getActionKeys("–ù–∏–∑–∫–æ–µ MP");
            String hpKey = getActionKeys("–ù–∏–∑–∫–æ–µ HP");

            if (!mpKey.isEmpty()) {
                double playerMP;
                synchronized (lock) {
                    playerMP = screenReader.readBarLevel(mpBar[0], mpBar[1], mpBar[2], mpBar[3]);
                }
                if (playerMP < mpPercent) {
                    synchronized (lock) {
                        for (String key : mpKey.split(",")) {
                            arduino.sendCommand("PRESS_KEY:" + key.trim());
                            log("üíß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MP: " + key.trim());
                            Thread.sleep(300 + random.nextInt(100));
                        }
                    }
                }
            }

            if (!hpKey.isEmpty()) {
                double playerHP;
                synchronized (lock) {
                    playerHP = screenReader.readBarLevel(hpBar[0], hpBar[1], hpBar[2], hpBar[3]);
                }
                if (playerHP < hpPercent) {
                    synchronized (lock) {
                        for (String key : hpKey.split(",")) {
                            arduino.sendCommand("PRESS_KEY:" + key.trim());
                            log("‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP: " + key.trim());
                            Thread.sleep(300 + random.nextInt(100));
                        }
                    }
                }
            }
        } catch (Exception e) {
            log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HP/MP: " + e.getMessage());
        }
    }

    public void stopBot() {
        running = false;
        synchronized (lock) {
            arduino.close();
        }
        log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    public StringProperty logProperty() {
        return log;
    }

    public void log(String message) {
        Platform.runLater(() -> log.set(log.get() + message + "\n"));
    }

    private String getActionKeys(String actionType) {
        for (BotUIController.Action action : actions) {
            if (action.getActionType().equals(actionType)) {
                return action.getKeys();
            }
        }
        return "";
    }

    private String getSkillKey(String skillName) {
        // –ú–∞–ø–ø–∏–Ω–≥ —Å–∫–∏–ª–ª–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏—à–∏ (–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ UI –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥)
        // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º F3-F12 –¥–ª—è —Å–∫–∏–ª–ª–æ–≤
        int index = skills.indexOf(skills.stream().filter(s -> s.getName().equals(skillName)).findFirst().orElse(null));
        if (index >= 0 && index < 10) {
            return "F" + (3 + index);
        }
        return "";
    }

    private boolean isWindowActive(String windowTitle) {
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            WinDef.HWND hWnd = User32.INSTANCE.FindWindow(null, windowTitle);
            return hWnd != null && User32.INSTANCE.IsWindowVisible(hWnd);
        }
        try {
            return ProcessHandle.allProcesses()
                    .map(ProcessHandle::info)
                    .map(ProcessHandle.Info::command)
                    .filter(cmd -> cmd.isPresent() && cmd.get().contains(windowTitle))
                    .findAny()
                    .isPresent();
        } catch (Exception e) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞: " + e.getMessage());
            return true;
        }
    }

    public void loadClassSkills(ClassId classId, ObservableList<Skill> skills) {
        skills.clear();
        List<Skill> classSkills = SkillList.getSkillsForClass(classId);
        if (classSkills.size() <= 4) {
            log("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –∫–ª–∞—Å—Å–∞ " + classId.getDisplayName() + " –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Å–∫–∏–ª–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SkillList.java.");
        } else {
            log("–ó–∞–≥—Ä—É–∂–µ–Ω–æ " + classSkills.size() + " —Å–∫–∏–ª–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ " + classId.getDisplayName() + ": " +
                    classSkills.stream().map(Skill::getName).collect(Collectors.joining(", ")));
        }
        skills.addAll(classSkills);
    }
}