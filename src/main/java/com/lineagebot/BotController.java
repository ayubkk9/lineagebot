package com.lineagebot;

import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.ObservableList;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef;

public class BotController {
    private final ScreenReader screenReader;
    private final ArduinoInterface arduino;
    private volatile boolean running = false;
    private final double hpPercent;
    private final double mpPercent;
    private final StringProperty log = new SimpleStringProperty();
    private final String characterWindow;
    private final ObservableList<BotUIController.Action> actions;
    private final ObservableList<Skill> selectedSkills;
    private final int[] hpBar;
    private final int[] mpBar;
    private final int[] mobHpBar;
    private final Object lock = new Object();

    public BotController(String arduinoPort, double hpPercent, double mpPercent, String characterWindow,
                         ObservableList<BotUIController.Action> actions, ObservableList<Skill> selectedSkills,
                         int[] hpBar, int[] mpBar, int[] mobHpBar) {
        this.screenReader = new ScreenReader();
        this.arduino = new ArduinoInterface(arduinoPort, this::log);
        this.hpPercent = hpPercent / 100.0;
        this.mpPercent = mpPercent / 100.0;
        this.characterWindow = characterWindow;
        this.actions = actions;
        this.selectedSkills = selectedSkills;
        this.hpBar = hpBar;
        this.mpBar = mpBar;
        this.mobHpBar = mobHpBar;
    }

    public void startBot() throws Exception {
        synchronized (lock) {
            if (!arduino.isPortOpen()) {
                log("–û—à–∏–±–∫–∞: –ø–æ—Ä—Ç Arduino –Ω–µ –æ—Ç–∫—Ä—ã—Ç");
                throw new Exception("–ü–æ—Ä—Ç Arduino –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            }
        }

        running = true;
        new Thread(() -> {
            while (running) {
                try {
                    if (!isWindowActive(characterWindow)) {
                        log("–û–∫–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª–∞");
                        Thread.sleep(2000);
                        continue;
                    }

                    // –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –º–æ–±–∞
                    String searchKeys = getActionKeys("–ü–æ–∏—Å–∫ –ú–æ–±–∞");
                    if (!searchKeys.isEmpty()) {
                        synchronized (lock) {
                            for (String key : searchKeys.split(",")) {
                                arduino.sendCommand("PRESS_KEY:" + key.trim());
                                log("üîç –ü–æ–∏—Å–∫ —Ü–µ–ª–∏: " + key.trim());
                                Thread.sleep(200);
                            }
                        }
                    }

                    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Ç–∞–∫–∏
                    int attackAttempts = 0;
                    double currentMobHP;
                    synchronized (lock) {
                        currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                    }
                    log("‚ù§Ô∏è HP –º–æ–±–∞: " + String.format("%.1f%%", currentMobHP * 100));

                    // –ê—Ç–∞–∫—É–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–∏–ª–ª—ã
                    int skillIndex = 0;
                    while (currentMobHP > 0.05 && attackAttempts < 8 && running) {
                        if (!selectedSkills.isEmpty()) {
                            Skill skill = selectedSkills.get(skillIndex % selectedSkills.size());
                            synchronized (lock) {
                                for (String key : skill.getKeys().split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("‚öîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ (" + (attackAttempts + 1) + "/8): " + skill.getName() + " (" + key.trim() + ")");
                                    Thread.sleep(300);
                                }
                            }
                            Thread.sleep(skill.getCooldown());
                            skillIndex++;
                        } else {
                            String attackKeys = getActionKeys("–ê—Ç–∞–∫–∞ –º–æ–±–∞");
                            if (!attackKeys.isEmpty()) {
                                synchronized (lock) {
                                    for (String key : attackKeys.split(",")) {
                                        arduino.sendCommand("PRESS_KEY:" + key.trim());
                                        log("‚öîÔ∏è –ê—Ç–∞–∫–∞ (" + (attackAttempts + 1) + "/8): " + key.trim());
                                        Thread.sleep(300);
                                    }
                                }
                            }
                        }

                        synchronized (lock) {
                            currentMobHP = screenReader.readBarLevel(mobHpBar[0], mobHpBar[1], mobHpBar[2], mobHpBar[3]);
                        }
                        log("‚ù§Ô∏è HP –º–æ–±–∞ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏: " + String.format("%.1f%%", currentMobHP * 100));

                        attackAttempts++;
                        Thread.sleep(500);
                    }

                    // –ï—Å–ª–∏ –º–æ–± –º–µ—Ä—Ç–≤
                    if (currentMobHP <= 0.05) {
                        log("‚úÖ –ú–æ–± —É–±–∏—Ç! –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É...");
                        Thread.sleep(1000);

                        String deadKeys = getActionKeys("–ú–æ–± —É–±–∏—Ç");
                        if (!deadKeys.isEmpty()) {
                            synchronized (lock) {
                                for (String key : deadKeys.split(",")) {
                                    arduino.sendCommand("PRESS_KEY:" + key.trim());
                                    log("üîÑ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞: " + key.trim());
                                    Thread.sleep(300);
                                }
                            }
                        }
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    checkPlayerStatus();
                    Thread.sleep(1000);

                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                } catch (Exception e) {
                    log("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: " + e.getMessage());
                }
            }
        }).start();
    }

    private void checkPlayerStatus() {
        try {
            String mpKey = getActionKeys("–ù–∏–∑–∫–æ–µ MP");
            String hpKey = getActionKeys("–ù–∏–∑–∫–æ–µ HP");

            if (!mpKey.isEmpty()) {
                double playerMP;
                synchronized (lock) {
                    playerMP = screenReader.readBarLevel(mpBar[0], mpBar[1], mpBar[2], mpBar[3]);
                }
                if (playerMP < mpPercent) {
                    synchronized (lock) {
                        arduino.sendCommand("PRESS_KEY:" + mpKey);
                    }
                    log("üíß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MP: " + mpKey);
                }
            }

            if (!hpKey.isEmpty()) {
                double playerHP;
                synchronized (lock) {
                    playerHP = screenReader.readBarLevel(hpBar[0], hpBar[1], hpBar[2], hpBar[3]);
                }
                if (playerHP < hpPercent) {
                    synchronized (lock) {
                        arduino.sendCommand("PRESS_KEY:" + hpKey);
                    }
                    log("‚ù§Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP: " + hpKey);
                }
            }
        } catch (Exception e) {
            log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HP/MP: " + e.getMessage());
        }
    }

    public void stopBot() {
        running = false;
        synchronized (lock) {
            arduino.close();
        }
        log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }

    public StringProperty logProperty() {
        return log;
    }

    public void log(String message) {
        Platform.runLater(() -> log.set(log.get() + message + "\n"));
    }

    private String getActionKeys(String actionType) {
        for (BotUIController.Action action : actions) {
            if (action.getActionType().equals(actionType)) {
                return action.getKeys();
            }
        }
        return "";
    }

    private boolean isWindowActive(String windowTitle) {
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("win")) {
            WinDef.HWND hWnd = User32.INSTANCE.FindWindow(null, windowTitle);
            return hWnd != null && User32.INSTANCE.IsWindowVisible(hWnd);
        }
        try {
            return ProcessHandle.allProcesses()
                    .map(ProcessHandle::info)
                    .map(ProcessHandle.Info::command)
                    .filter(cmd -> cmd.isPresent() && cmd.get().contains(windowTitle))
                    .findAny()
                    .isPresent();
        } catch (Exception e) {
            log("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–∫–Ω–∞: " + e.getMessage());
            return true;
        }
    }

    public void loadClassSkills(ClassId classId, ObservableList<Skill> skills) {
        skills.clear();
        switch (classId) {
            case DARK_AVENGER:
                skills.add(new Skill("Power Strike", "–ê—Ç–∞–∫–∞", 20, 2000, "F1"));
                skills.add(new Skill("Drain Health", "–ê—Ç–∞–∫–∞", 30, 5000, "F2"));
                skills.add(new Skill("Shield Stun", "–î–µ–±–∞—Ñ—Ñ", 25, 8000, "F3"));
                skills.add(new Skill("Deflect Arrow", "–ë–∞—Ñ—Ñ", 15, 10000, "F4"));
                break;
            case PALADIN:
                skills.add(new Skill("Holy Strike", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Heal", "–õ–µ—á–µ–Ω–∏–µ", 40, 6000, "F2"));
                skills.add(new Skill("Might", "–ë–∞—Ñ—Ñ", 30, 10000, "F3"));
                skills.add(new Skill("Holy Armor", "–ë–∞—Ñ—Ñ", 20, 12000, "F4"));
                break;
            case GLADIATOR:
                skills.add(new Skill("Triple Slash", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Sonic Focus", "–ë–∞—Ñ—Ñ", 10, 5000, "F2"));
                skills.add(new Skill("War Cry", "–ë–∞—Ñ—Ñ", 30, 15000, "F3"));
                skills.add(new Skill("Double Sonic Slash", "–ê—Ç–∞–∫–∞", 35, 7000, "F4"));
                break;
            case BISHOP:
                skills.add(new Skill("Heal", "–õ–µ—á–µ–Ω–∏–µ", 30, 5000, "F1"));
                skills.add(new Skill("Resurrection", "–õ–µ—á–µ–Ω–∏–µ", 50, 30000, "F2"));
                skills.add(new Skill("Blessing of Queen", "–ë–∞—Ñ—Ñ", 40, 15000, "F3"));
                skills.add(new Skill("Greater Heal", "–õ–µ—á–µ–Ω–∏–µ", 45, 8000, "F4"));
                break;
            case SPELLSINGER:
                skills.add(new Skill("Ice Bolt", "–ê—Ç–∞–∫–∞", 20, 2000, "F1"));
                skills.add(new Skill("Blizzard", "–ê—Ç–∞–∫–∞", 35, 7000, "F2"));
                skills.add(new Skill("Mana Regeneration", "–ë–∞—Ñ—Ñ", 30, 12000, "F3"));
                skills.add(new Skill("Frost Wall", "–î–µ–±–∞—Ñ—Ñ", 40, 9000, "F4"));
                break;
            case SPELLHOWLER:
                skills.add(new Skill("Wind Strike", "–ê—Ç–∞–∫–∞", 20, 2000, "F1"));
                skills.add(new Skill("Hurricane", "–ê—Ç–∞–∫–∞", 35, 7000, "F2"));
                skills.add(new Skill("Curse Fear", "–î–µ–±–∞—Ñ—Ñ", 30, 10000, "F3"));
                skills.add(new Skill("Vampiric Claw", "–ê—Ç–∞–∫–∞", 40, 8000, "F4"));
                break;
            case NECROMANCER:
                skills.add(new Skill("Corpse Life Drain", "–ê—Ç–∞–∫–∞", 25, 4000, "F1"));
                skills.add(new Skill("Summon Zombie", "–ë–∞—Ñ—Ñ", 50, 20000, "F2"));
                skills.add(new Skill("Curse Poison", "–î–µ–±–∞—Ñ—Ñ", 30, 10000, "F3"));
                skills.add(new Skill("Death Spike", "–ê—Ç–∞–∫–∞", 35, 6000, "F4"));
                break;
            case PROPHET:
                skills.add(new Skill("Blessing of Might", "–ë–∞—Ñ—Ñ", 30, 15000, "F1"));
                skills.add(new Skill("Heal", "–õ–µ—á–µ–Ω–∏–µ", 40, 6000, "F2"));
                skills.add(new Skill("Wind Walk", "–ë–∞—Ñ—Ñ", 25, 12000, "F3"));
                skills.add(new Skill("Resist Shock", "–ë–∞—Ñ—Ñ", 20, 10000, "F4"));
                break;
            case SWORD_SINGER:
                skills.add(new Skill("Song of Hunter", "–ë–∞—Ñ—Ñ", 30, 15000, "F1"));
                skills.add(new Skill("Sonic Blaster", "–ê—Ç–∞–∫–∞", 25, 4000, "F2"));
                skills.add(new Skill("Song of Wind", "–ë–∞—Ñ—Ñ", 30, 15000, "F3"));
                skills.add(new Skill("Song of Vitality", "–ë–∞—Ñ—Ñ", 35, 12000, "F4"));
                break;
            case TEMPLE_KNIGHT:
                skills.add(new Skill("Shield Bash", "–ê—Ç–∞–∫–∞", 20, 5000, "F1"));
                skills.add(new Skill("Summon Storm Cubic", "–ë–∞—Ñ—Ñ", 40, 20000, "F2"));
                skills.add(new Skill("Deflect Arrow", "–ë–∞—Ñ—Ñ", 15, 10000, "F3"));
                skills.add(new Skill("Holy Armor", "–ë–∞—Ñ—Ñ", 25, 12000, "F4"));
                break;
            case SHILLIEN_KNIGHT:
                skills.add(new Skill("Drain Health", "–ê—Ç–∞–∫–∞", 30, 5000, "F1"));
                skills.add(new Skill("Lightning Strike", "–ê—Ç–∞–∫–∞", 35, 7000, "F2"));
                skills.add(new Skill("Shield Stun", "–î–µ–±–∞—Ñ—Ñ", 25, 8000, "F3"));
                skills.add(new Skill("Hex", "–î–µ–±–∞—Ñ—Ñ", 20, 10000, "F4"));
                break;
            case BLADEDANCER:
                skills.add(new Skill("Dance of Fire", "–ë–∞—Ñ—Ñ", 30, 15000, "F1"));
                skills.add(new Skill("Sting", "–ê—Ç–∞–∫–∞", 25, 3000, "F2"));
                skills.add(new Skill("Dance of Fury", "–ë–∞—Ñ—Ñ", 30, 15000, "F3"));
                skills.add(new Skill("Dance of Light", "–ë–∞—Ñ—Ñ", 35, 12000, "F4"));
                break;
            case HAWKEYE:
                skills.add(new Skill("Power Shot", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Burst Shot", "–ê—Ç–∞–∫–∞", 35, 6000, "F2"));
                skills.add(new Skill("Hawk Eye", "–ë–∞—Ñ—Ñ", 20, 10000, "F3"));
                skills.add(new Skill("Stunning Shot", "–î–µ–±–∞—Ñ—Ñ", 30, 8000, "F4"));
                break;
            case SILVER_RANGER:
                skills.add(new Skill("Double Shot", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Elemental Shot", "–ê—Ç–∞–∫–∞", 35, 6000, "F2"));
                skills.add(new Skill("Rapid Shot", "–ë–∞—Ñ—Ñ", 20, 10000, "F3"));
                skills.add(new Skill("Stunning Shot", "–î–µ–±–∞—Ñ—Ñ", 30, 8000, "F4"));
                break;
            case PHANTOM_RANGER:
                skills.add(new Skill("Double Shot", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Lethal Shot", "–ê—Ç–∞–∫–∞", 40, 7000, "F2"));
                skills.add(new Skill("Dead Eye", "–ë–∞—Ñ—Ñ", 20, 10000, "F3"));
                skills.add(new Skill("Stunning Shot", "–î–µ–±–∞—Ñ—Ñ", 30, 8000, "F4"));
                break;
            case ABYSS_WALKER:
                skills.add(new Skill("Backstab", "–ê—Ç–∞–∫–∞", 30, 4000, "F1"));
                skills.add(new Skill("Deadly Blow", "–ê—Ç–∞–∫–∞", 25, 3000, "F2"));
                skills.add(new Skill("Shadow Step", "–ë–∞—Ñ—Ñ", 20, 10000, "F3"));
                skills.add(new Skill("Blinding Blow", "–ê—Ç–∞–∫–∞", 35, 6000, "F4"));
                break;
            case PLAINS_WALKER:
                skills.add(new Skill("Backstab", "–ê—Ç–∞–∫–∞", 30, 4000, "F1"));
                skills.add(new Skill("Deadly Blow", "–ê—Ç–∞–∫–∞", 25, 3000, "F2"));
                skills.add(new Skill("Dash", "–ë–∞—Ñ—Ñ", 20, 10000, "F3"));
                skills.add(new Skill("Critical Blow", "–ê—Ç–∞–∫–∞", 35, 6000, "F4"));
                break;
            case TREASURE_HUNTER:
                skills.add(new Skill("Backstab", "–ê—Ç–∞–∫–∞", 30, 4000, "F1"));
                skills.add(new Skill("Deadly Blow", "–ê—Ç–∞–∫–∞", 25, 3000, "F2"));
                skills.add(new Skill("Unlock", "–ë–∞—Ñ—Ñ", 15, 8000, "F3"));
                skills.add(new Skill("Fake Death", "–ë–∞—Ñ—Ñ", 20, 12000, "F4"));
                break;
            case WARLOCK:
                skills.add(new Skill("Summon Kat the Cat", "–ë–∞—Ñ—Ñ", 50, 20000, "F1"));
                skills.add(new Skill("Transfer Pain", "–ë–∞—Ñ—Ñ", 20, 10000, "F2"));
                skills.add(new Skill("Body to Mind", "–õ–µ—á–µ–Ω–∏–µ", 0, 15000, "F3"));
                skills.add(new Skill("Servitor Heal", "–õ–µ—á–µ–Ω–∏–µ", 30, 6000, "F4"));
                break;
            case SORCERER:
                skills.add(new Skill("Flame Strike", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Blazing Circle", "–ê—Ç–∞–∫–∞", 35, 7000, "F2"));
                skills.add(new Skill("Prominence", "–ê—Ç–∞–∫–∞", 40, 8000, "F3"));
                skills.add(new Skill("Mana Regeneration", "–ë–∞—Ñ—Ñ", 30, 12000, "F4"));
                break;
            case WARCRYER:
                skills.add(new Skill("Chant of Fire", "–ë–∞—Ñ—Ñ", 30, 15000, "F1"));
                skills.add(new Skill("Chant of Battle", "–ë–∞—Ñ—Ñ", 30, 15000, "F2"));
                skills.add(new Skill("Chant of Shielding", "–ë–∞—Ñ—Ñ", 30, 15000, "F3"));
                skills.add(new Skill("Soul Cry", "–ë–∞—Ñ—Ñ", 20, 10000, "F4"));
                break;
            case OVERLORD:
                skills.add(new Skill("Seal of Poison", "–î–µ–±–∞—Ñ—Ñ", 30, 10000, "F1"));
                skills.add(new Skill("Seal of Flame", "–î–µ–±–∞—Ñ—Ñ", 35, 12000, "F2"));
                skills.add(new Skill("Chant of Victory", "–ë–∞—Ñ—Ñ", 40, 15000, "F3"));
                skills.add(new Skill("Seal of Silence", "–î–µ–±–∞—Ñ—Ñ", 30, 10000, "F4"));
                break;
            case DESTROYER:
                skills.add(new Skill("Power Smash", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Frenzy", "–ë–∞—Ñ—Ñ", 20, 15000, "F2"));
                skills.add(new Skill("Guts", "–ë–∞—Ñ—Ñ", 20, 15000, "F3"));
                skills.add(new Skill("Fatal Strike", "–ê—Ç–∞–∫–∞", 30, 5000, "F4"));
                break;
            case TYRANT:
                skills.add(new Skill("Force Blaster", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Burning Fist", "–ê—Ç–∞–∫–∞", 30, 5000, "F2"));
                skills.add(new Skill("Force Storm", "–ê—Ç–∞–∫–∞", 35, 7000, "F3"));
                skills.add(new Skill("Hawk Fist", "–ê—Ç–∞–∫–∞", 20, 10000, "F4"));
                break;
            case BOUNTY_HUNTER:
                skills.add(new Skill("Spoil", "–î–µ–±–∞—Ñ—Ñ", 20, 8000, "F1"));
                skills.add(new Skill("Crushing Strike", "–ê—Ç–∞–∫–∞", 25, 3000, "F2"));
                skills.add(new Skill("Sweeper", "–ë–∞—Ñ—Ñ", 15, 5000, "F3"));
                skills.add(new Skill("Fake Death", "–ë–∞—Ñ—Ñ", 20, 12000, "F4"));
                break;
            case WARSMITH:
                skills.add(new Skill("Whirlwind", "–ê—Ç–∞–∫–∞", 25, 3000, "F1"));
                skills.add(new Skill("Summon Mechanic Golem", "–ë–∞—Ñ—Ñ", 50, 20000, "F2"));
                skills.add(new Skill("Repair", "–õ–µ—á–µ–Ω–∏–µ", 20, 10000, "F3"));
                skills.add(new Skill("Hammer Crush", "–ê—Ç–∞–∫–∞", 30, 5000, "F4"));
                break;
            default:
                skills.add(new Skill("Default Attack", "–ê—Ç–∞–∫–∞", 20, 2000, "F1"));
                skills.add(new Skill("Default Heal", "–õ–µ—á–µ–Ω–∏–µ", 30, 5000, "F2"));
                skills.add(new Skill("Default Buff", "–ë–∞—Ñ—Ñ", 40, 10000, "F3"));
                skills.add(new Skill("Default Debuff", "–î–µ–±–∞—Ñ—Ñ", 25, 8000, "F4"));
        }
        log("–ó–∞–≥—Ä—É–∂–µ–Ω–æ " + skills.size() + " —Å–∫–∏–ª–ª–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞: " + classId.getDisplayName());
    }
}