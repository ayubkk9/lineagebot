package com.lineagebot;

import com.fazecast.jSerialComm.SerialPort;
import java.util.function.Consumer;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class ArduinoInterface {
    private SerialPort serialPort;
    private final String portName;
    private final Consumer<String> logger;
    private volatile boolean isOpen = false;
    private static final int READ_TIMEOUT_MS = 1000; // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    private static final int BAUD_RATE = 9600; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö

    public ArduinoInterface(String portName, Consumer<String> logger) {
        this.portName = portName;
        this.logger = logger;
        openPort();
    }

    private void openPort() {
        try {
            serialPort = SerialPort.getCommPort(portName);
            serialPort.setBaudRate(BAUD_RATE);
            serialPort.setNumDataBits(8);
            serialPort.setNumStopBits(1);
            serialPort.setParity(SerialPort.NO_PARITY);
            serialPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, READ_TIMEOUT_MS, 0);

            if (serialPort.openPort()) {
                isOpen = true;
                logger.accept("‚úÖ –ü–æ—Ä—Ç " + portName + " —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç");
                // –î–∞—ë–º Arduino –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            } else {
                isOpen = false;
                logger.accept("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç " + portName);
            }
        } catch (Exception e) {
            isOpen = false;
            logger.accept("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ " + portName + ": " + e.getMessage());
        }
    }

    public void sendCommand(String command) {
        if (!isOpen || serialPort == null) {
            logger.accept("‚ùå –ü–æ—Ä—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç, –∫–æ–º–∞–Ω–¥–∞ '" + command + "' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –≤–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ —á–∞—Ç
        if (command.startsWith("CHAT:")) {
            logger.accept("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—ã CHAT: –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è");
            return;
        }

        try {
            OutputStream output = serialPort.getOutputStream();
            output.write((command + "\n").getBytes());
            output.flush();
            logger.accept("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + command);

            // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Arduino —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            InputStream input = serialPort.getInputStream();
            StringBuilder response = new StringBuilder();
            long startTime = System.currentTimeMillis();
            while (System.currentTimeMillis() - startTime < READ_TIMEOUT_MS) {
                if (input.available() > 0) {
                    int data = input.read();
                    if (data == -1) break; // –ö–æ–Ω–µ—Ü –ø–æ—Ç–æ–∫–∞
                    char c = (char) data;
                    response.append(c);
                    if (c == '\n') break; // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                }
                Thread.sleep(10);
            }

            if (response.length() > 0) {
                logger.accept("üì• –û—Ç–≤–µ—Ç –æ—Ç Arduino: " + response.toString().trim());
            } else {
                logger.accept("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç Arduino –Ω–µ –ø–æ–ª—É—á–µ–Ω");
            }

        } catch (IOException e) {
            logger.accept("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã '" + command + "': " + e.getMessage());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            logger.accept("‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '" + command + "'");
        }
    }

    public boolean isPortOpen() {
        return isOpen && serialPort != null && serialPort.isOpen();
    }

    public void close() {
        if (serialPort != null && isOpen) {
            try {
                serialPort.closePort();
                isOpen = false;
                logger.accept("‚úÖ –ü–æ—Ä—Ç " + portName + " –∑–∞–∫—Ä—ã—Ç");
            } catch (Exception e) {
                logger.accept("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ " + portName + ": " + e.getMessage());
            }
        }
    }
}